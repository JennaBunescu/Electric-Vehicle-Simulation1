#ifndef COMPONENTS_H
#define COMPONENTS_H
#include <iostream>
#include "../headers/driver_input.h"
#include "../headers/vehicle.h"
using namespace std;

class EV;

class Battery{

    private:
        float Q_max; //Q stands for "Charge." This variable represents the max amount of charge Max capacity in Ampere-hours
        float Q_now; //The current amount of charge that the battery contains
        float V_max; //The maximum voltage output/input of the battery
        float R_internal; //Internal resistance
        float voltage;
        float current; //The electrical current being provided by or to the battery
        float stateOfHealth; //The battery has a "state of health," of how "healthy" it is at a given time
        float temperature; //Tempearture of the battery which varies with usage
        float heatCapacity; //Thermal mass of battery in J/°C
        float heatTransferCoeff; //To environment W/°C
        float totalTimeSeconds; //Total session time in seconds - this could be implemented in the future as well, but we haven't used it yet
        float totalDistanceKm; //Total distance traveled in kilometers

    public:
        
        Battery();   
        Battery(float Q_max, float V_max, float R_internal, float heatCapacity);
        ~Battery(){}
        //Copy constructor
        Battery(const Battery& other) : Q_max(other.Q_max) {
            Q_now = other.Q_max;
        }

    //Assignment operator to set a class equal to another
    Battery& operator=(const Battery& other) {
        if (this != &other) {
            Q_max = other.Q_max;
            Q_now = other.Q_max;
        }
        return *this;
    }

        void set_Q_max(float Q);
        void set_Q_current(float Q);
        void set_V_max(float V);
        void set_R_internal(float R);
        void set_SOH(float SOH);
        void set_temp(float T);

        float get_SOC();
        float get_Q_max();
        float get_Q_current();
        float get_V_max();
        float get_R_internal();
        float get_SOH();
        float get_temp();

        void setCurrent(float I);
        void rechargeFromRegen(float deltaQ);

        void discharge(float speed, float delta_t);

        bool charge(float V_applied, float time, bool &fullCharge);

        float updateTemperature(float delta_t, float ambientTemp);

        void degradeSOH(float delta_t);

        void degradeWithCycle(float deltaQ);


};


class Motor {
private:
    float speed; //Speed of the vehicle in km/h
    float R_internal; //Internal resistance of the motor - we haven't actually used this attribute anywhere yet as we only modelled the electrical activity of the battery, but we plan to in the future
    float efficiency; //Efficiency of the motor (between 0 and 1)
    float maxSpeed; //Maximum motor speed
    float maxTorque; //Maximum torque the motor can deliver in Newton-meters
    float maxBrakeTorque; //Maximum torque generated by braking in Newton-meters
    float inertia; //Rotational inertia of the motor (kg * m^2)
    float regenEfficiency; // Efficiency factor for regenerative braking (0 to 1)
    float maxRegenPower;   // Maximum power that can be recovered through regen braking (Watts)
    float heatTransferCoeff; // Heat transfer coefficient for motor cooling (W/C)
    float temperature;       // Current temperature of the motor (C)
    float heatCapacity; // Thermal capacity of motor, heat needed to raise temp by 1°C (J/C)


public:
    Motor();
    Motor(const Motor& other);
    Motor& operator=(const Motor& other);
    Motor(float maxTorque, float maxSpeed);

    void set_speed(float num);

    bool isRegenerating(DriverInput& input);

    void setMaxRegenPower(float power);

    float getMaxRegenPower() const;

    float updateSpeed(DriverInput& driverInput, EV &vehicle, Battery &battery, float deltaTime);
    void applyRegenerativeBraking(DriverInput &input, EV &vehicle, Battery& battery, float deltaTime);
    float calculateRegenPower(DriverInput &input);
    float updateTemperature(float delta_t, float ambientTemp);



};

class Charger{

    private:
        bool isCharging; //to track state
        float maxPowerOutput;
        float efficiency;


    public:

    Charger();

    void startCharging(Battery &battery, float delta_t);
    void stopCharging();
    bool get_charging_state();
};

#endif